103.2 Procesar secuencias de texto usando filtros


Una forma de hacer funcionar programas juntos, es atravez de piping y redirections 
-> Casi todos sus programas de manipulacion de texto obtendran texto de una entrada estandar (stdin)
-> Lo enviaran a una salida estandar (stdout)
-> y lo enviaran eventuales errores a una salida de error estandar (stderr)

cat - (privienen de concatenate)
	Puedes usarlo de esta manera:
	cat > file.txt
	...	...
	...
	..

	Donde todo lo que escribas se guardara en el documento 

	Tambien puede copiar archivos como, cat myfile > mynewFile

diff - nos permite comparar dos archivos, para ver sus diferencias


Procesar flujos de texto
 -Leer un arhcivo comprimido 
grep - busca coincidencias en archivos
	podemos usarlo en un arhcivo a travez de una pipeline, como:
	cat file.txt | grep "oro"

	o podemos usarlo como comando, como:
	grep "oro" file.txt

Hay otros comandos que manejan arhivos comprimidos, como:
	- bzcat para archivos comprimidos bzip
	- xzcat para archivos comprimidos zx
	- zcat para archivos comprimidos gzip 
Cada uno se uso para ver el contenido de un archivo comprimidos basado en el algoritmo de compresion utilizado



Ver un archivo paginado 
less - usado para canalizar la salida para que los resultados se paginen 


Obtener una parte de un archivo de texto
head - se usa para leer las primeras diez lineas de un archivo de manera predeterminada
tail - se usa para leer las ultimas diez lineas de un arhcivo de manera predeterminada
nl - muestra el numero de lieas de texto trasmitidas al comando ejem: sudo head /var/log/syslog | nl 
wc -l  -  cuenta el numero de lineas de un archvi, como cat file | wc -l 

Podemos modificar el comando de head y tail con la opcion de n, como teail -n 4 imprimira las 4 ultimas lineas de un archivo, asi con head 


Los fundamentos de Sed, el editor de Stream 
Podemos usar grep con la opcion de -v, para invertir el orden del sentido, el cual nos mostrara las lineas donde no aparece la coincidencia, como
	zcat ftu.tat.gz | grep -v cat --> Nos mostrar las lineas donde no aparece cat

la mayoria de lo que podemos hacer con grep, lo podemos hacer con sed, como mostrar las lineas donde contienen la cadena "cat "
	sed -n /cat/p < ftu.txt

Podemo usar sed para filtrar las lineas que tienen una coincidencia, como:
	sed -n '/cat/p' poem.txt

Podemos sustituir coinidencias, como:
	sed 's/hola/adios/' < poem.txt


Podemos crear una copia de seguridad y al mismo tiempo escribir sobre el archvo original, como:
	sed -i.backup 's/cat/dog' poem.txt


Garantizar la itegridad de los datos
Para garantizar la seguridad podemos usaar algunos de los siguinetes algoritmos

| Comando     | Algoritmo usado | Longitud del hash | Seguridad                                 |
| ----------- | --------------- | ----------------- | ----------------------------------------- |
| `md5sum`    | MD5             | 32 caracteres     | Baja (no recomendado para seguridad real) |
| `sha256sum` | SHA-256         | 64 caracteres     | Alta seguridad                            |
| `sha512sum` | SHA-512         | 128 caracteres    | Muy alta (más lento, pero más fuerte)     |

podemos comprbar el hash de un archivo como
sha256sum file > hashes
sha256sum file2 >> hashes
sha256sum -c hashes

puedes hacer las mismas operaciones con los otros algoritmos 


Buscando mas en los archivos
od - se usa para depurar aplicaciones y varios archivos, por defecto lo enumera en formato octal
La primera columnas, es el desplazamiento de bytes para cada line de salida
las siguientes ocho columnas es el valor octal de los datos dentro de la columna

	-x para ver el contenido en forma hexadecimal
	-c muestra carcateres que normalmente no se ven que existen dentro de un archivo, como las entradas newline 
	-An  Si solo desea ver todos los caracteres dentro de un archivo y no necesita ver la información de desplazamiento de bytes, la columna de desplazamiento de bytes se puede eliminar con esta opcion



otros comandos 
uniq - se usa para eliminar lineas duplicadas de un archivo o de la entrada estandar (trabaja con linea de texto identicas, por defecto, elimina todas las que sean iguales y esten  juntas)
	-d muestra las lineas que estan repetidas
	-i ignora las diferencias entre mayusculas y minusculas 
	-c nos indica las las veces que esta repetida una linea  
	

sort - ordena las lineas de un archivo (de forma predeterminada ordena alfabeticamente)
	-r hace que la ordenacion sea de forma inversa
	-n ordena en base a una informacion numerica 
	-h ordena en magnitudes humanas, como megas, bytes o gigas


rev - Usado para dividir archivos mas grandes en partes mas pequeñas
	-l representa el numero de lineas a dividir
	-b divide el archivo en partes que contengan un tamaño especifico en bytes
	-d utiliza un sufijo numerico en lugar de letras, ejem: x00,x01
	 puedes especificar al final del comando y de especificar el archivo un prefijo, ejemp
			split -l 100 -d pg50461-images.html  parte --> esto dividira el archivo como parte00 parte01, etc

tr - Se usa para traducir o eliminar carcateres de la entrada
	-d elimina un caracter especifico. ejem: cat file | tr -d ","
	-s remplaza las secuencias de carcateres repetidos por un unico carcater. ejem: cat file | tr -s "," "-"
	este comando se puede usar con las clases de carcateres como [:digit:]

nl - muestra el contenido de un fichero de texto añadiendo el numero de linea (Por defecto no cuenta las lineas en blanco, para esto se añade -b a)
	-b a cuenta las lineas en blano (EN EL EXAMEN DBEMOS DE ESPECIFICAR EL COMANDO ESPECIFICO, POR LO QUE SI NOS PREGUNTAN UN COMANDO PARA MOSTRAR LAS LINEAS DE UN ARCHIVO, DEBEMOS SELECCIONAR nl y NO cat -n)

od - Muestra un fichero en formato numerico octal

split - Divide un fichero en varios segun unos limites
	-l determina el numero de lineas que deseamos que esten en cada parte
	-d Esto hara que el nombre de los archivos tenga forma numerica (en la ultima parte del comando puedes especificar el nombre de como apareceran los documentos) -- > ejem: split -l 100 -d pg50461-images.html  parte

paste - concatena lina a linea la informacion de dos ficheros, separando estas mediante un tabulador (por defecto sera una tabulacion)
	-d DELIMITER Puedes usar esta opcion para concatenar las lineas en base a un carcater como: paste -d "," file1 file 2, 
