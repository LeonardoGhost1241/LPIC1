
==============================================
Leccion 1 - Trabajando en la linea de comandos
==============================================


Obteniendo informacion del sistema
pwd - imprime el ruta del directorio donde estas posicionado 
uname - imprime informacion sobre el sistema
	-a todas la informacion
	-s nombre del kernel
	-v version del kernel
	-p procesador
	-i info del hardware
	-o sistema operativo 


Obteniendo informacion de los comandos
man - este comando te muestra la pagina man del comando especificado ejem: man lsblk 
apropos - Si no estas seguro del nombre del comando puedes usar este para buscarlo a travez de los nombres y descripciones de la pagina man
	(si no recuerdas el comando que va como root puedes usar apropos root | grep -i "^ch*") --> chroot

type - si no necesitas la doc completa, puede usar el comando type, que dara informacion sobre el comando
	ejem:
		$ type uname cp kill which
		uname is hashed (/bin/uname)  --> Cuando dice hashed se refiere a que su ubicacion en el sistema de archivos ha sido almacenada en la table de hash del shell, esto significa que el shell ha registrado la ruta completa del comando, para que no tenga que buscarla cada vez que se ejecuta el comando (puedes limpiar la tabla hash con hash -d )
		cp is /bin/cp
		kill is a shell builtin -->   (builtin nos dice que este comando es parte del shell bash)
		which is /usr/bin/which


Usando su historial de comandos
history - comando que muestra un hisotrial de los comandos que hemos usado (usa el arhivo oculto bash_history en el direcotrio ~)


==============================================
Leccion 2 - Trabajando en la linea de comandos
==============================================
-Encontrar variables de entorno
env - mostrara todas las variables de entorno

para imprimir una variable singular usaremos el comando echo, como echo $PATH		

-Crear nuevas variables de entorno
basta con hacer var=valor (SIN ESPACIO)
podemos imprimir su valor con echo $var
Nota:estas variables solo estaran disponibles en la sesion actual, por lo que si iniciamos un hijo de bash(iniciar otra terminal) y despues ejecutamos echo $var, no funcionara, por que solo sera en la sesion actual que estara disponible la variable creada

-Eliminar varuables de entorno 
Una forma facil es cerrar y abrir la terminal
Sin embargo no es la mejor forma, podemos usar unset por ejemplo. Al escribir unset (sin el $) se eliminara la variable
unset var, si ejecutamos echo $var, no saldra nada

diferencias entre set y env
set - Se usa para establecer o mostrar las variables de entorno y opciones del shell
	mostrar todas las variables de shell
	establecer una variable ejem:set var=value

env - Se usa para mostrar el entorno actual o para ejecutar un comando en un entorno modificado
	Mostrara todas las variables de entorno
	Para ejecutar un comando con una variable de entorno especifica ejem: env var=value command 
Se se crea una variable var=value y se usa env como env | grep var, no dara resltado, sin embargo lo hacemos con set, set | grep var, nos mostrara el contenido, por lo que set generara todas las variables y funciones


Mantener el varlo de caracteres especiales
En la terminal se debe de especificar con cuidado el nombre de un archivo, si queremos crear touch my file, nos creara dos archivos, para evitar eso podemos usar "" o '', ejem touch "my file" o 'my file'

(Tenga en cuenta que las comillas simples conservarán el valor literal de todos los caracteres, mientras que las comillas dobles conservarán todos los caracteres excepto para $, `, \ y, en ciertos casos, !.)


